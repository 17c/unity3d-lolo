//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ShibaInu_TcpSocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ShibaInu.TcpSocketClient), typeof(System.Object));
		L.RegFunction("Content", Content);
		L.RegFunction("Send", Send);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateShibaInu_TcpSocketClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("connentTimeout", get_connentTimeout, set_connentTimeout);
		L.RegVar("sendTimeout", get_sendTimeout, set_sendTimeout);
		L.RegVar("receiveTimeout", get_receiveTimeout, set_receiveTimeout);
		L.RegVar("luaClient", get_luaClient, set_luaClient);
		L.RegVar("eventCallback", get_eventCallback, set_eventCallback);
		L.RegVar("msgProtocol", get_msgProtocol, set_msgProtocol);
		L.RegVar("host", get_host, null);
		L.RegVar("port", get_port, null);
		L.RegVar("connected", get_connected, null);
		L.RegVar("connecting", get_connecting, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateShibaInu_TcpSocketClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ShibaInu.TcpSocketClient obj = new ShibaInu.TcpSocketClient();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ShibaInu.TcpSocketClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Content(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)ToLua.CheckObject<ShibaInu.TcpSocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Content(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)ToLua.CheckObject<ShibaInu.TcpSocketClient>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)ToLua.CheckObject<ShibaInu.TcpSocketClient>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connentTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int ret = obj.connentTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connentTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int ret = obj.sendTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_receiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int ret = obj.receiveTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaClient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			LuaInterface.LuaTable ret = obj.luaClient;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaClient on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			System.Action<string,object> ret = obj.eventCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgProtocol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			ShibaInu.IMsgProtocol ret = obj.msgProtocol;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtocol on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			string ret = obj.host;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int ret = obj.port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			bool ret = obj.connected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_connecting(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			bool ret = obj.connecting;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connecting on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_connentTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.connentTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index connentTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sendTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.sendTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sendTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_receiveTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.receiveTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiveTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaClient(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.luaClient = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index luaClient on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			System.Action<string,object> arg0 = (System.Action<string,object>)ToLua.CheckDelegate<System.Action<string,object>>(L, 2);
			obj.eventCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgProtocol(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ShibaInu.TcpSocketClient obj = (ShibaInu.TcpSocketClient)o;
			ShibaInu.IMsgProtocol arg0 = (ShibaInu.IMsgProtocol)ToLua.CheckObject<ShibaInu.IMsgProtocol>(L, 2);
			obj.msgProtocol = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index msgProtocol on a nil value");
		}
	}
}

